def MetadataObjectForURL(url):

  # Extract the details available directly form the page.
  #Log('h2 ELEMENT ----> ' + HTML.StringFromElement(page.xpath('//*[@id="current_video_info"]')[0]))
  # title = page.xpath('//*[@id="current_video_info"]/h2')[0].text
  # description = page.xpath('//*[@id="current_video_info"]/p')[0].text
  # thumb = page.xpath("//head//meta[@property='og:image']")[0].get('content')


  return VideoClipObject(
       title = 'temp title',
       summary = 'temp description',
       thumb = 'http://some/bogus/thumb.jpg')

  #url = 'http://cdn-api.vmixcore.com/apis/media.php?action=getMediaList&class_id=1&alltime=1&order_method=DESC&get_count=1&order=date_published_start&export=JSONP&limit=%s&start=%s&&metadata=1&external_genre_ids=131&atoken=cf15596810c05b64c422e071473549f4'

  # ## fn args
  # pagenum = 0
  # total_pages = 1
  # videos_per_page = 15
  # ##

  # jsondata = JSON.ObjectFromURL(url%((total_pages*videos_per_page),(pagenum*videos_per_page)))
  
  # #Log(JSON.StringFromObject(jsondata))

  # for item in jsondata['media']:
  #   Log("token ---> " + item['token'])
  


  #   token = item['token']
  #   #HTTP.Request('http://cdn-media.vmixcore.com/vmixcore/play/uvp?token=%s&player_name=unified_video_player&output=xml'%token)
  #   Element = XML.ElementFromURL('http://cdn-media.vmixcore.com/vmixcore/play/uvp?token=%s&player_name=unified_video_player&output=xml'%token) 
  #   smil = Element.xpath('//play_url')[0].text
  #   Log('smil is: ' + smil)
  #   #height = Element.xpath('//height')[0].text
  #   #width = Element.xpath('//width')[0].text
  #   #return Redirect (VideoClipObject(smil,width = width,height = height))
    

  #   oc.add(VideoClipObject(
  #           url=smil,
  #           title = item['title'], 
  #           summary = 'foo summary', 
  #           thumb = Callback(Thumb, url=item['thumbnail'][0]['url']),
  #           duration = int(item['duration'])*1000
  #           ))
    
  # #   #oc.add(Function(VideoClipObject(GetVideoFromToken,title=item['title'], thumb=item['thumbnail'][0]['url'],duration=int(item['duration'])*1000),token=item['token']))

def MediaObjectsForURL(url):

  Log('In media objects for URL...')
  Log('url ---> ' + url)
  
  # Play request (returns XML to be parsed for .mp4):
  # http://cdn-media.vmixcore.com/vmixcore/play/uvp?token=V0hSCOGPb6M8jJ8WHAVqJ3v9DJZWuogato&player_name=unified_video_player&output=xml
  



  # for token in vmixTokens:

  #   #Log('TOKEN -----> ' + token['token'])
    
  #   rawxml = HTTP.Request(VMIX_PLAY_URL % token['token']).content
  #   Log('rawXML ---> ' + rawxml)
  #   rawxml = rawxml.replace('<![CDATA[','')
  #   rawxml = rawxml.replace(']]>','')
  #   #Log('cleaned rawXML --> ' + rawxml)
  #   playxml = XML.ElementFromString(rawxml)

  #   #Log('PLAY XML ---> ' + XML.StringFromElement(playxml))

  #   #Log('MP4 URL ---> ' + XML.StringFromElement(XML.ElementFromURL()))

  #   mp4url = playxml.xpath('//play_url')[0].text
  #   Log('mp4url --->' + mp4url)
  #   #Log('mp4obj -->' + XML.StringFromElement(mp4url))
  #   #Log('mp4url ----->' + mp4url)
  if url.find('/mp4/'): 
    # Regular podcast...
    return [
       MediaObject(
           video_codec = VideoCodec.H264,
           audio_codec = AudioCodec.AAC,
           video_resolution = 720,
           container = 'MP4',
           audio_channels = 2,
           bitrate = 3193,
           parts = [PartObject(key=Callback(PlayVideo, url=url))]
           )
        ]
  elif url[-4:] == '.m4v':
    Log('FOUND .m4v')
    return [
       MediaObject(
           video_codec = VideoCodec.H264,
           audio_codec = AudioCodec.AAC,
           video_resolution = 270,
           container = 'M4V',
           audio_channels = 2,
           bitrate = 816,
           parts = [PartObject(key=Callback(PlayVideo, url=url))]
           )
        ]
  else:
    pass
  #   # Live ustream feed...
  #   return [
  #      MediaObject(
  #          video_codec = VideoCodec.H264,
  #          audio_codec = AudioCodec.AAC,
  #          video_resolution = 288,
  #          container = 'mp4',
  #          audio_channels = 2,
  #          bitrate = 501,
  #          parts = [PartObject(key=Callback(PlayVideo, url=url, format=0))]
  #      )
  #    ]

     # These other formats are available, but they're so similar it's probably not worth giving the choice.

     # MediaObject(
     #     video_codec = VideoCodec.H264,
     #     audio_codec = AudioCodec.AAC,
     #     video_resolution = 226,
     #     container = 'mp4',
     #     audio_channels = 2,
     #     bitrate = 379,
     #     parts = [PartObject(key=Callback(PlayVideo, url=url, format=1))]
     # ),
     # MediaObject(
     #     video_codec = VideoCodec.H264,
     #     audio_codec = AudioCodec.AAC,
     #     video_resolution = 288,
     #     container = 'mp4',
     #     audio_channels = 2,
     #     bitrate = 501,
     #     parts = [PartObject(key=Callback(PlayVideo, url=url, format=2))]
     # )
    
def PlayVideo(url):

  # ATOKEN            = 'cf15596810c05b64c422e071473549f4'
  # VMIX_METADATA_URL = 'http://cdn-api.vmixcore.com/apis/media.php?action=getMedia&media_id=%s&atoken=%s'
  # VMIX_PLAY_URL     = 'http://cdn-media.vmixcore.com/vmixcore/play/uvp?token=%s&player_name=unified_video_player&output=xml'

  # # Make this request with media_id from url:
  # # http://cdn-api.vmixcore.com/apis/media.php?action=getMedia&media_id=144284961&atoken=cf15596810c05b64c422e071473549f4
  # media_id = url[url.rfind('=')+1:]
  # vmixJSON = JSON.ObjectFromURL(VMIX_METADATA_URL % (media_id, ATOKEN))

  # # Resulting JSON will have the tokens for the various SWF formats:
  # # vmixTokens = vmixJSON['formats']['format']
  # # it = 0
  # # for token in vmixTokens:
  # #   Log('Token ' + str(it) + ' ---> ' + token['token'])
  # #   Log('HTTP req ---> ' + VMIX_PLAY_URL % vmixTokens[it]['token'])
  # #   rawxml = HTTP.Request(VMIX_PLAY_URL % vmixTokens[it]['token']).content
  # #   rawxml = rawxml.replace('<![CDATA[','')
  # #   rawxml = rawxml.replace(']]>','')
  # #   playxml = XML.ElementFromString(rawxml)
  # #   mp4url = playxml.xpath('//play_url')[0].text
  # #   Log('mp4url --->' + mp4url)
  # #   it = it + 1
  
  # token = vmixJSON['formats']['format'][format]['token']
  # rawxml = HTTP.Request(VMIX_PLAY_URL % token).content
  # rawxml = rawxml.replace('<![CDATA[','')
  # rawxml = rawxml.replace(']]>','')
  # playxml = XML.ElementFromString(rawxml)
  # mp4url = playxml.xpath('//play_url')[0].text

  #return url
  return Redirect(url)

def NormalizeURL(url):
  return url